# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _SparkFHE
else:
    import _SparkFHE

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SparkFHE.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        return _SparkFHE.SwigPyIterator_value(self)

    def incr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _SparkFHE.SwigPyIterator_incr(self, n)

    def decr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _SparkFHE.SwigPyIterator_decr(self, n)

    def distance(self, x: "SwigPyIterator") -> "ptrdiff_t":
        return _SparkFHE.SwigPyIterator_distance(self, x)

    def equal(self, x: "SwigPyIterator") -> "bool":
        return _SparkFHE.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _SparkFHE.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _SparkFHE.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _SparkFHE.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _SparkFHE.SwigPyIterator_previous(self)

    def advance(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _SparkFHE.SwigPyIterator_advance(self, n)

    def __eq__(self, x: "SwigPyIterator") -> "bool":
        return _SparkFHE.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: "SwigPyIterator") -> "bool":
        return _SparkFHE.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _SparkFHE.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _SparkFHE.SwigPyIterator___isub__(self, n)

    def __add__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _SparkFHE.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _SparkFHE.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _SparkFHE:
_SparkFHE.SwigPyIterator_swigregister(SwigPyIterator)

class Ciphertext(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SparkFHE.Ciphertext_swiginit(self, _SparkFHE.new_Ciphertext(*args))

    def setData(self, *args) -> "void":
        return _SparkFHE.Ciphertext_setData(self, *args)

    def getData(self) -> "SparkFHE::CiphertextType":
        return _SparkFHE.Ciphertext_getData(self)

    def size(self) -> "unsigned int":
        return _SparkFHE.Ciphertext_size(self)

    def toString(self) -> "std::string const":
        return _SparkFHE.Ciphertext_toString(self)
    __swig_destroy__ = _SparkFHE.delete_Ciphertext

# Register Ciphertext in _SparkFHE:
_SparkFHE.Ciphertext_swigregister(Ciphertext)

class Plaintext(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SparkFHE.Plaintext_swiginit(self, _SparkFHE.new_Plaintext(*args))

    def setData(self, *args) -> "void":
        return _SparkFHE.Plaintext_setData(self, *args)

    def getData(self) -> "SparkFHE::PlaintextType":
        return _SparkFHE.Plaintext_getData(self)

    def toString(self) -> "std::string const":
        return _SparkFHE.Plaintext_toString(self)

    def size(self) -> "unsigned int":
        return _SparkFHE.Plaintext_size(self)
    __swig_destroy__ = _SparkFHE.delete_Plaintext

# Register Plaintext in _SparkFHE:
_SparkFHE.Plaintext_swigregister(Plaintext)

class PublicKey(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _SparkFHE.PublicKey_swiginit(self, _SparkFHE.new_PublicKey())
    __swig_destroy__ = _SparkFHE.delete_PublicKey

# Register PublicKey in _SparkFHE:
_SparkFHE.PublicKey_swigregister(PublicKey)

class SecretKey(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _SparkFHE.SecretKey_swiginit(self, _SparkFHE.new_SecretKey())
    __swig_destroy__ = _SparkFHE.delete_SecretKey

# Register SecretKey in _SparkFHE:
_SparkFHE.SecretKey_swigregister(SecretKey)

class FHE(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SparkFHE.FHE_swiginit(self, _SparkFHE.new_FHE(*args))
    __swig_destroy__ = _SparkFHE.delete_FHE

    def get_crypto_param(self, arg2: "std::string const &") -> "long":
        return _SparkFHE.FHE_get_crypto_param(self, arg2)

    def generate_crypto_params_suffix(self) -> "std::string":
        return _SparkFHE.FHE_generate_crypto_params_suffix(self)

    def generate_key_pair(self, arg2: "std::string const &", arg3: "std::string const &", arg4: "std::string const &") -> "void":
        return _SparkFHE.FHE_generate_key_pair(self, arg2, arg3, arg4)

    def load_public_key(self, arg2: "std::string const &") -> "void":
        return _SparkFHE.FHE_load_public_key(self, arg2)

    def load_secret_key(self, arg2: "std::string const &") -> "void":
        return _SparkFHE.FHE_load_secret_key(self, arg2)

    def load_key_pair(self, arg2: "std::string const &", arg3: "std::string const &") -> "void":
        return _SparkFHE.FHE_load_key_pair(self, arg2, arg3)

    def encode(self, *args) -> "SparkFHE::Plaintext":
        return _SparkFHE.FHE_encode(self, *args)

    def encode_many(self, *args) -> "std::vector< SparkFHE::Plaintext,std::allocator< SparkFHE::Plaintext > >":
        return _SparkFHE.FHE_encode_many(self, *args)

    def encode_bits(self, arg2: "int const", littleEndian: "bool"=False) -> "SparkFHE::Plaintext":
        return _SparkFHE.FHE_encode_bits(self, arg2, littleEndian)

    def decode(self, *args) -> "void":
        return _SparkFHE.FHE_decode(self, *args)

    def encrypt(self, *args) -> "std::vector< std::string,std::allocator< std::string > >":
        return _SparkFHE.FHE_encrypt(self, *args)

    def encryptAsBinary(self, arg2: "int const", arg3: "int const", littleEndian: "bool"=False) -> "std::vector< SparkFHE::Ciphertext,std::allocator< SparkFHE::Ciphertext > >":
        return _SparkFHE.FHE_encryptAsBinary(self, arg2, arg3, littleEndian)

    def decrypt(self, *args) -> "std::vector< std::string,std::allocator< std::string > >":
        return _SparkFHE.FHE_decrypt(self, *args)

    def fhe_add(self, *args) -> "std::string":
        return _SparkFHE.FHE_fhe_add(self, *args)

    def fhe_subtract(self, *args) -> "std::string":
        return _SparkFHE.FHE_fhe_subtract(self, *args)

    def fhe_multiply(self, *args) -> "std::string":
        return _SparkFHE.FHE_fhe_multiply(self, *args)

    def fhe_add_constant(self, *args) -> "std::string":
        return _SparkFHE.FHE_fhe_add_constant(self, *args)

    def fhe_multiply_constant(self, *args) -> "std::string":
        return _SparkFHE.FHE_fhe_multiply_constant(self, *args)

    def fhe_square(self, *args) -> "std::string":
        return _SparkFHE.FHE_fhe_square(self, *args)

    def fhe_power(self, *args) -> "std::string":
        return _SparkFHE.FHE_fhe_power(self, *args)

    def fhe_not(self, *args) -> "std::string":
        return _SparkFHE.FHE_fhe_not(self, *args)

    def fhe_and(self, *args) -> "std::string":
        return _SparkFHE.FHE_fhe_and(self, *args)

    def fhe_or(self, *args) -> "std::string":
        return _SparkFHE.FHE_fhe_or(self, *args)

    def fhe_xor(self, *args) -> "std::string":
        return _SparkFHE.FHE_fhe_xor(self, *args)

    def fhe_xnor(self, *args) -> "std::string":
        return _SparkFHE.FHE_fhe_xnor(self, *args)

    def fhe_is_equal(self, *args) -> "std::string":
        return _SparkFHE.FHE_fhe_is_equal(self, *args)

    def fhe_pairwise_multiply(self, *args) -> "std::string":
        return _SparkFHE.FHE_fhe_pairwise_multiply(self, *args)

    def fhe_mask(self, *args) -> "std::string":
        return _SparkFHE.FHE_fhe_mask(self, *args)

    def fhe_rotate(self, *args) -> "std::string":
        return _SparkFHE.FHE_fhe_rotate(self, *args)

    def fhe_rotate_columns(self, *args) -> "std::string":
        return _SparkFHE.FHE_fhe_rotate_columns(self, *args)

    def fhe_shift(self, *args) -> "std::string":
        return _SparkFHE.FHE_fhe_shift(self, *args)

    def fhe_running_sum(self, *args) -> "std::vector< std::string,std::allocator< std::string > >":
        return _SparkFHE.FHE_fhe_running_sum(self, *args)

    def fhe_total_sum(self, *args) -> "std::string":
        return _SparkFHE.FHE_fhe_total_sum(self, *args)

    def fhe_dot_product(self, *args) -> "std::string":
        return _SparkFHE.FHE_fhe_dot_product(self, *args)

    def do_FHE_dot_product(self, *args) -> "std::string":
        return _SparkFHE.FHE_do_FHE_dot_product(self, *args)

    def do_FHE_basic_op(self, *args) -> "std::vector< std::string,std::allocator< std::string > >":
        return _SparkFHE.FHE_do_FHE_basic_op(self, *args)

    def fhe_full_adder(self, *args) -> "std::vector< std::string,std::allocator< std::string > >":
        return _SparkFHE.FHE_fhe_full_adder(self, *args)

    def numNonzeros(self, *args) -> "std::string":
        return _SparkFHE.FHE_numNonzeros(self, *args)

    def processWordsList(self, arg2: "StringVector") -> "std::vector< SparkFHE::WordObj,std::allocator< SparkFHE::WordObj > >":
        return _SparkFHE.FHE_processWordsList(self, arg2)

    def printWordsList(self, arg2: "std::vector< SparkFHE::WordObj,std::allocator< SparkFHE::WordObj > > &") -> "void":
        return _SparkFHE.FHE_printWordsList(self, arg2)

    def map_function(self, arg2: "std::vector< SparkFHE::WordObj,std::allocator< SparkFHE::WordObj > > &") -> "void":
        return _SparkFHE.FHE_map_function(self, arg2)

    def reduce_function(self, arg2: "std::vector< SparkFHE::WordObj,std::allocator< SparkFHE::WordObj > > &") -> "void":
        return _SparkFHE.FHE_reduce_function(self, arg2)

    def readAndEncrypt(self, inFile: "std::string const &", outFile: "std::string const &", asBinary: "bool") -> "int":
        return _SparkFHE.FHE_readAndEncrypt(self, inFile, outFile, asBinary)

    def readEncryptedWords(self, arg2: "std::string const &", arg3: "std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > > &") -> "int":
        return _SparkFHE.FHE_readEncryptedWords(self, arg2, arg3)

    def store_ciphertext_to_file(self, *args) -> "void":
        return _SparkFHE.FHE_store_ciphertext_to_file(self, *args)

    def store_ciphertexts_to_file(self, *args) -> "void":
        return _SparkFHE.FHE_store_ciphertexts_to_file(self, *args)

    def read_ciphertext_from_file(self, arg2: "std::string const &", arg3: "std::string const &") -> "SparkFHE::Ciphertext":
        return _SparkFHE.FHE_read_ciphertext_from_file(self, arg2, arg3)

    def read_ciphertext_from_file_as_string(self, arg2: "std::string const &", arg3: "std::string const &") -> "std::string":
        return _SparkFHE.FHE_read_ciphertext_from_file_as_string(self, arg2, arg3)

    def read_ciphertexts_from_file(self, arg2: "std::string const &", arg3: "std::string const &") -> "std::vector< SparkFHE::Ciphertext,std::allocator< SparkFHE::Ciphertext > >":
        return _SparkFHE.FHE_read_ciphertexts_from_file(self, arg2, arg3)

    def read_ciphertexts_from_file_as_string(self, arg2: "std::string const &", arg3: "std::string const &") -> "std::vector< std::string,std::allocator< std::string > >":
        return _SparkFHE.FHE_read_ciphertexts_from_file_as_string(self, arg2, arg3)

# Register FHE in _SparkFHE:
_SparkFHE.FHE_swigregister(FHE)

class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _SparkFHE.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _SparkFHE.IntVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _SparkFHE.IntVector___bool__(self)

    def __len__(self) -> "std::vector< int >::size_type":
        return _SparkFHE.IntVector___len__(self)

    def __getslice__(self, i: "std::vector< int >::difference_type", j: "std::vector< int >::difference_type") -> "std::vector< int,std::allocator< int > > *":
        return _SparkFHE.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _SparkFHE.IntVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< int >::difference_type", j: "std::vector< int >::difference_type") -> "void":
        return _SparkFHE.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _SparkFHE.IntVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< int >::value_type const &":
        return _SparkFHE.IntVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _SparkFHE.IntVector___setitem__(self, *args)

    def pop(self) -> "std::vector< int >::value_type":
        return _SparkFHE.IntVector_pop(self)

    def append(self, x: "std::vector< int >::value_type const &") -> "void":
        return _SparkFHE.IntVector_append(self, x)

    def empty(self) -> "bool":
        return _SparkFHE.IntVector_empty(self)

    def size(self) -> "std::vector< int >::size_type":
        return _SparkFHE.IntVector_size(self)

    def swap(self, v: "IntVector") -> "void":
        return _SparkFHE.IntVector_swap(self, v)

    def begin(self) -> "std::vector< int >::iterator":
        return _SparkFHE.IntVector_begin(self)

    def end(self) -> "std::vector< int >::iterator":
        return _SparkFHE.IntVector_end(self)

    def rbegin(self) -> "std::vector< int >::reverse_iterator":
        return _SparkFHE.IntVector_rbegin(self)

    def rend(self) -> "std::vector< int >::reverse_iterator":
        return _SparkFHE.IntVector_rend(self)

    def clear(self) -> "void":
        return _SparkFHE.IntVector_clear(self)

    def get_allocator(self) -> "std::vector< int >::allocator_type":
        return _SparkFHE.IntVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _SparkFHE.IntVector_pop_back(self)

    def erase(self, *args) -> "std::vector< int >::iterator":
        return _SparkFHE.IntVector_erase(self, *args)

    def __init__(self, *args):
        _SparkFHE.IntVector_swiginit(self, _SparkFHE.new_IntVector(*args))

    def push_back(self, x: "std::vector< int >::value_type const &") -> "void":
        return _SparkFHE.IntVector_push_back(self, x)

    def front(self) -> "std::vector< int >::value_type const &":
        return _SparkFHE.IntVector_front(self)

    def back(self) -> "std::vector< int >::value_type const &":
        return _SparkFHE.IntVector_back(self)

    def assign(self, n: "std::vector< int >::size_type", x: "std::vector< int >::value_type const &") -> "void":
        return _SparkFHE.IntVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _SparkFHE.IntVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _SparkFHE.IntVector_insert(self, *args)

    def reserve(self, n: "std::vector< int >::size_type") -> "void":
        return _SparkFHE.IntVector_reserve(self, n)

    def capacity(self) -> "std::vector< int >::size_type":
        return _SparkFHE.IntVector_capacity(self)
    __swig_destroy__ = _SparkFHE.delete_IntVector

# Register IntVector in _SparkFHE:
_SparkFHE.IntVector_swigregister(IntVector)

class LongVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _SparkFHE.LongVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _SparkFHE.LongVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _SparkFHE.LongVector___bool__(self)

    def __len__(self) -> "std::vector< long >::size_type":
        return _SparkFHE.LongVector___len__(self)

    def __getslice__(self, i: "std::vector< long >::difference_type", j: "std::vector< long >::difference_type") -> "std::vector< long,std::allocator< long > > *":
        return _SparkFHE.LongVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _SparkFHE.LongVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< long >::difference_type", j: "std::vector< long >::difference_type") -> "void":
        return _SparkFHE.LongVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _SparkFHE.LongVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< long >::value_type const &":
        return _SparkFHE.LongVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _SparkFHE.LongVector___setitem__(self, *args)

    def pop(self) -> "std::vector< long >::value_type":
        return _SparkFHE.LongVector_pop(self)

    def append(self, x: "std::vector< long >::value_type const &") -> "void":
        return _SparkFHE.LongVector_append(self, x)

    def empty(self) -> "bool":
        return _SparkFHE.LongVector_empty(self)

    def size(self) -> "std::vector< long >::size_type":
        return _SparkFHE.LongVector_size(self)

    def swap(self, v: "LongVector") -> "void":
        return _SparkFHE.LongVector_swap(self, v)

    def begin(self) -> "std::vector< long >::iterator":
        return _SparkFHE.LongVector_begin(self)

    def end(self) -> "std::vector< long >::iterator":
        return _SparkFHE.LongVector_end(self)

    def rbegin(self) -> "std::vector< long >::reverse_iterator":
        return _SparkFHE.LongVector_rbegin(self)

    def rend(self) -> "std::vector< long >::reverse_iterator":
        return _SparkFHE.LongVector_rend(self)

    def clear(self) -> "void":
        return _SparkFHE.LongVector_clear(self)

    def get_allocator(self) -> "std::vector< long >::allocator_type":
        return _SparkFHE.LongVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _SparkFHE.LongVector_pop_back(self)

    def erase(self, *args) -> "std::vector< long >::iterator":
        return _SparkFHE.LongVector_erase(self, *args)

    def __init__(self, *args):
        _SparkFHE.LongVector_swiginit(self, _SparkFHE.new_LongVector(*args))

    def push_back(self, x: "std::vector< long >::value_type const &") -> "void":
        return _SparkFHE.LongVector_push_back(self, x)

    def front(self) -> "std::vector< long >::value_type const &":
        return _SparkFHE.LongVector_front(self)

    def back(self) -> "std::vector< long >::value_type const &":
        return _SparkFHE.LongVector_back(self)

    def assign(self, n: "std::vector< long >::size_type", x: "std::vector< long >::value_type const &") -> "void":
        return _SparkFHE.LongVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _SparkFHE.LongVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _SparkFHE.LongVector_insert(self, *args)

    def reserve(self, n: "std::vector< long >::size_type") -> "void":
        return _SparkFHE.LongVector_reserve(self, n)

    def capacity(self) -> "std::vector< long >::size_type":
        return _SparkFHE.LongVector_capacity(self)
    __swig_destroy__ = _SparkFHE.delete_LongVector

# Register LongVector in _SparkFHE:
_SparkFHE.LongVector_swigregister(LongVector)

class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _SparkFHE.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _SparkFHE.DoubleVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _SparkFHE.DoubleVector___bool__(self)

    def __len__(self) -> "std::vector< double >::size_type":
        return _SparkFHE.DoubleVector___len__(self)

    def __getslice__(self, i: "std::vector< double >::difference_type", j: "std::vector< double >::difference_type") -> "std::vector< double,std::allocator< double > > *":
        return _SparkFHE.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _SparkFHE.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< double >::difference_type", j: "std::vector< double >::difference_type") -> "void":
        return _SparkFHE.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _SparkFHE.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< double >::value_type const &":
        return _SparkFHE.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _SparkFHE.DoubleVector___setitem__(self, *args)

    def pop(self) -> "std::vector< double >::value_type":
        return _SparkFHE.DoubleVector_pop(self)

    def append(self, x: "std::vector< double >::value_type const &") -> "void":
        return _SparkFHE.DoubleVector_append(self, x)

    def empty(self) -> "bool":
        return _SparkFHE.DoubleVector_empty(self)

    def size(self) -> "std::vector< double >::size_type":
        return _SparkFHE.DoubleVector_size(self)

    def swap(self, v: "DoubleVector") -> "void":
        return _SparkFHE.DoubleVector_swap(self, v)

    def begin(self) -> "std::vector< double >::iterator":
        return _SparkFHE.DoubleVector_begin(self)

    def end(self) -> "std::vector< double >::iterator":
        return _SparkFHE.DoubleVector_end(self)

    def rbegin(self) -> "std::vector< double >::reverse_iterator":
        return _SparkFHE.DoubleVector_rbegin(self)

    def rend(self) -> "std::vector< double >::reverse_iterator":
        return _SparkFHE.DoubleVector_rend(self)

    def clear(self) -> "void":
        return _SparkFHE.DoubleVector_clear(self)

    def get_allocator(self) -> "std::vector< double >::allocator_type":
        return _SparkFHE.DoubleVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _SparkFHE.DoubleVector_pop_back(self)

    def erase(self, *args) -> "std::vector< double >::iterator":
        return _SparkFHE.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _SparkFHE.DoubleVector_swiginit(self, _SparkFHE.new_DoubleVector(*args))

    def push_back(self, x: "std::vector< double >::value_type const &") -> "void":
        return _SparkFHE.DoubleVector_push_back(self, x)

    def front(self) -> "std::vector< double >::value_type const &":
        return _SparkFHE.DoubleVector_front(self)

    def back(self) -> "std::vector< double >::value_type const &":
        return _SparkFHE.DoubleVector_back(self)

    def assign(self, n: "std::vector< double >::size_type", x: "std::vector< double >::value_type const &") -> "void":
        return _SparkFHE.DoubleVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _SparkFHE.DoubleVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _SparkFHE.DoubleVector_insert(self, *args)

    def reserve(self, n: "std::vector< double >::size_type") -> "void":
        return _SparkFHE.DoubleVector_reserve(self, n)

    def capacity(self) -> "std::vector< double >::size_type":
        return _SparkFHE.DoubleVector_capacity(self)
    __swig_destroy__ = _SparkFHE.delete_DoubleVector

# Register DoubleVector in _SparkFHE:
_SparkFHE.DoubleVector_swigregister(DoubleVector)

class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _SparkFHE.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _SparkFHE.StringVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _SparkFHE.StringVector___bool__(self)

    def __len__(self) -> "std::vector< std::string >::size_type":
        return _SparkFHE.StringVector___len__(self)

    def __getslice__(self, i: "std::vector< std::string >::difference_type", j: "std::vector< std::string >::difference_type") -> "std::vector< std::string,std::allocator< std::string > > *":
        return _SparkFHE.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _SparkFHE.StringVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::string >::difference_type", j: "std::vector< std::string >::difference_type") -> "void":
        return _SparkFHE.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _SparkFHE.StringVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::string >::value_type const &":
        return _SparkFHE.StringVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _SparkFHE.StringVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::string >::value_type":
        return _SparkFHE.StringVector_pop(self)

    def append(self, x: "std::vector< std::string >::value_type const &") -> "void":
        return _SparkFHE.StringVector_append(self, x)

    def empty(self) -> "bool":
        return _SparkFHE.StringVector_empty(self)

    def size(self) -> "std::vector< std::string >::size_type":
        return _SparkFHE.StringVector_size(self)

    def swap(self, v: "StringVector") -> "void":
        return _SparkFHE.StringVector_swap(self, v)

    def begin(self) -> "std::vector< std::string >::iterator":
        return _SparkFHE.StringVector_begin(self)

    def end(self) -> "std::vector< std::string >::iterator":
        return _SparkFHE.StringVector_end(self)

    def rbegin(self) -> "std::vector< std::string >::reverse_iterator":
        return _SparkFHE.StringVector_rbegin(self)

    def rend(self) -> "std::vector< std::string >::reverse_iterator":
        return _SparkFHE.StringVector_rend(self)

    def clear(self) -> "void":
        return _SparkFHE.StringVector_clear(self)

    def get_allocator(self) -> "std::vector< std::string >::allocator_type":
        return _SparkFHE.StringVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _SparkFHE.StringVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::string >::iterator":
        return _SparkFHE.StringVector_erase(self, *args)

    def __init__(self, *args):
        _SparkFHE.StringVector_swiginit(self, _SparkFHE.new_StringVector(*args))

    def push_back(self, x: "std::vector< std::string >::value_type const &") -> "void":
        return _SparkFHE.StringVector_push_back(self, x)

    def front(self) -> "std::vector< std::string >::value_type const &":
        return _SparkFHE.StringVector_front(self)

    def back(self) -> "std::vector< std::string >::value_type const &":
        return _SparkFHE.StringVector_back(self)

    def assign(self, n: "std::vector< std::string >::size_type", x: "std::vector< std::string >::value_type const &") -> "void":
        return _SparkFHE.StringVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _SparkFHE.StringVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _SparkFHE.StringVector_insert(self, *args)

    def reserve(self, n: "std::vector< std::string >::size_type") -> "void":
        return _SparkFHE.StringVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::string >::size_type":
        return _SparkFHE.StringVector_capacity(self)
    __swig_destroy__ = _SparkFHE.delete_StringVector

# Register StringVector in _SparkFHE:
_SparkFHE.StringVector_swigregister(StringVector)

class LongMatrix(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _SparkFHE.LongMatrix_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _SparkFHE.LongMatrix___nonzero__(self)

    def __bool__(self) -> "bool":
        return _SparkFHE.LongMatrix___bool__(self)

    def __len__(self) -> "std::vector< std::vector< long > >::size_type":
        return _SparkFHE.LongMatrix___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< long > >::difference_type", j: "std::vector< std::vector< long > >::difference_type") -> "std::vector< std::vector< long,std::allocator< long > >,std::allocator< std::vector< long,std::allocator< long > > > > *":
        return _SparkFHE.LongMatrix___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _SparkFHE.LongMatrix___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< long > >::difference_type", j: "std::vector< std::vector< long > >::difference_type") -> "void":
        return _SparkFHE.LongMatrix___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _SparkFHE.LongMatrix___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< long > >::value_type const &":
        return _SparkFHE.LongMatrix___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _SparkFHE.LongMatrix___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< long > >::value_type":
        return _SparkFHE.LongMatrix_pop(self)

    def append(self, x: "LongVector") -> "void":
        return _SparkFHE.LongMatrix_append(self, x)

    def empty(self) -> "bool":
        return _SparkFHE.LongMatrix_empty(self)

    def size(self) -> "std::vector< std::vector< long > >::size_type":
        return _SparkFHE.LongMatrix_size(self)

    def swap(self, v: "LongMatrix") -> "void":
        return _SparkFHE.LongMatrix_swap(self, v)

    def begin(self) -> "std::vector< std::vector< long > >::iterator":
        return _SparkFHE.LongMatrix_begin(self)

    def end(self) -> "std::vector< std::vector< long > >::iterator":
        return _SparkFHE.LongMatrix_end(self)

    def rbegin(self) -> "std::vector< std::vector< long > >::reverse_iterator":
        return _SparkFHE.LongMatrix_rbegin(self)

    def rend(self) -> "std::vector< std::vector< long > >::reverse_iterator":
        return _SparkFHE.LongMatrix_rend(self)

    def clear(self) -> "void":
        return _SparkFHE.LongMatrix_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< long > >::allocator_type":
        return _SparkFHE.LongMatrix_get_allocator(self)

    def pop_back(self) -> "void":
        return _SparkFHE.LongMatrix_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< long > >::iterator":
        return _SparkFHE.LongMatrix_erase(self, *args)

    def __init__(self, *args):
        _SparkFHE.LongMatrix_swiginit(self, _SparkFHE.new_LongMatrix(*args))

    def push_back(self, x: "LongVector") -> "void":
        return _SparkFHE.LongMatrix_push_back(self, x)

    def front(self) -> "std::vector< std::vector< long > >::value_type const &":
        return _SparkFHE.LongMatrix_front(self)

    def back(self) -> "std::vector< std::vector< long > >::value_type const &":
        return _SparkFHE.LongMatrix_back(self)

    def assign(self, n: "std::vector< std::vector< long > >::size_type", x: "LongVector") -> "void":
        return _SparkFHE.LongMatrix_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _SparkFHE.LongMatrix_resize(self, *args)

    def insert(self, *args) -> "void":
        return _SparkFHE.LongMatrix_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< long > >::size_type") -> "void":
        return _SparkFHE.LongMatrix_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< long > >::size_type":
        return _SparkFHE.LongMatrix_capacity(self)
    __swig_destroy__ = _SparkFHE.delete_LongMatrix

# Register LongMatrix in _SparkFHE:
_SparkFHE.LongMatrix_swigregister(LongMatrix)

class DoubleMatrix(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _SparkFHE.DoubleMatrix_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _SparkFHE.DoubleMatrix___nonzero__(self)

    def __bool__(self) -> "bool":
        return _SparkFHE.DoubleMatrix___bool__(self)

    def __len__(self) -> "std::vector< std::vector< double > >::size_type":
        return _SparkFHE.DoubleMatrix___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< double > >::difference_type", j: "std::vector< std::vector< double > >::difference_type") -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *":
        return _SparkFHE.DoubleMatrix___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _SparkFHE.DoubleMatrix___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< double > >::difference_type", j: "std::vector< std::vector< double > >::difference_type") -> "void":
        return _SparkFHE.DoubleMatrix___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _SparkFHE.DoubleMatrix___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< double > >::value_type const &":
        return _SparkFHE.DoubleMatrix___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _SparkFHE.DoubleMatrix___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< double > >::value_type":
        return _SparkFHE.DoubleMatrix_pop(self)

    def append(self, x: "DoubleVector") -> "void":
        return _SparkFHE.DoubleMatrix_append(self, x)

    def empty(self) -> "bool":
        return _SparkFHE.DoubleMatrix_empty(self)

    def size(self) -> "std::vector< std::vector< double > >::size_type":
        return _SparkFHE.DoubleMatrix_size(self)

    def swap(self, v: "DoubleMatrix") -> "void":
        return _SparkFHE.DoubleMatrix_swap(self, v)

    def begin(self) -> "std::vector< std::vector< double > >::iterator":
        return _SparkFHE.DoubleMatrix_begin(self)

    def end(self) -> "std::vector< std::vector< double > >::iterator":
        return _SparkFHE.DoubleMatrix_end(self)

    def rbegin(self) -> "std::vector< std::vector< double > >::reverse_iterator":
        return _SparkFHE.DoubleMatrix_rbegin(self)

    def rend(self) -> "std::vector< std::vector< double > >::reverse_iterator":
        return _SparkFHE.DoubleMatrix_rend(self)

    def clear(self) -> "void":
        return _SparkFHE.DoubleMatrix_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< double > >::allocator_type":
        return _SparkFHE.DoubleMatrix_get_allocator(self)

    def pop_back(self) -> "void":
        return _SparkFHE.DoubleMatrix_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< double > >::iterator":
        return _SparkFHE.DoubleMatrix_erase(self, *args)

    def __init__(self, *args):
        _SparkFHE.DoubleMatrix_swiginit(self, _SparkFHE.new_DoubleMatrix(*args))

    def push_back(self, x: "DoubleVector") -> "void":
        return _SparkFHE.DoubleMatrix_push_back(self, x)

    def front(self) -> "std::vector< std::vector< double > >::value_type const &":
        return _SparkFHE.DoubleMatrix_front(self)

    def back(self) -> "std::vector< std::vector< double > >::value_type const &":
        return _SparkFHE.DoubleMatrix_back(self)

    def assign(self, n: "std::vector< std::vector< double > >::size_type", x: "DoubleVector") -> "void":
        return _SparkFHE.DoubleMatrix_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _SparkFHE.DoubleMatrix_resize(self, *args)

    def insert(self, *args) -> "void":
        return _SparkFHE.DoubleMatrix_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< double > >::size_type") -> "void":
        return _SparkFHE.DoubleMatrix_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< double > >::size_type":
        return _SparkFHE.DoubleMatrix_capacity(self)
    __swig_destroy__ = _SparkFHE.delete_DoubleMatrix

# Register DoubleMatrix in _SparkFHE:
_SparkFHE.DoubleMatrix_swigregister(DoubleMatrix)

class CiphertextVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _SparkFHE.CiphertextVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _SparkFHE.CiphertextVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _SparkFHE.CiphertextVector___bool__(self)

    def __len__(self) -> "std::vector< SparkFHE::Ciphertext >::size_type":
        return _SparkFHE.CiphertextVector___len__(self)

    def __getslice__(self, i: "std::vector< SparkFHE::Ciphertext >::difference_type", j: "std::vector< SparkFHE::Ciphertext >::difference_type") -> "std::vector< SparkFHE::Ciphertext,std::allocator< SparkFHE::Ciphertext > > *":
        return _SparkFHE.CiphertextVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _SparkFHE.CiphertextVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< SparkFHE::Ciphertext >::difference_type", j: "std::vector< SparkFHE::Ciphertext >::difference_type") -> "void":
        return _SparkFHE.CiphertextVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _SparkFHE.CiphertextVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< SparkFHE::Ciphertext >::value_type const &":
        return _SparkFHE.CiphertextVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _SparkFHE.CiphertextVector___setitem__(self, *args)

    def pop(self) -> "std::vector< SparkFHE::Ciphertext >::value_type":
        return _SparkFHE.CiphertextVector_pop(self)

    def append(self, x: "Ciphertext") -> "void":
        return _SparkFHE.CiphertextVector_append(self, x)

    def empty(self) -> "bool":
        return _SparkFHE.CiphertextVector_empty(self)

    def size(self) -> "std::vector< SparkFHE::Ciphertext >::size_type":
        return _SparkFHE.CiphertextVector_size(self)

    def swap(self, v: "CiphertextVector") -> "void":
        return _SparkFHE.CiphertextVector_swap(self, v)

    def begin(self) -> "std::vector< SparkFHE::Ciphertext >::iterator":
        return _SparkFHE.CiphertextVector_begin(self)

    def end(self) -> "std::vector< SparkFHE::Ciphertext >::iterator":
        return _SparkFHE.CiphertextVector_end(self)

    def rbegin(self) -> "std::vector< SparkFHE::Ciphertext >::reverse_iterator":
        return _SparkFHE.CiphertextVector_rbegin(self)

    def rend(self) -> "std::vector< SparkFHE::Ciphertext >::reverse_iterator":
        return _SparkFHE.CiphertextVector_rend(self)

    def clear(self) -> "void":
        return _SparkFHE.CiphertextVector_clear(self)

    def get_allocator(self) -> "std::vector< SparkFHE::Ciphertext >::allocator_type":
        return _SparkFHE.CiphertextVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _SparkFHE.CiphertextVector_pop_back(self)

    def erase(self, *args) -> "std::vector< SparkFHE::Ciphertext >::iterator":
        return _SparkFHE.CiphertextVector_erase(self, *args)

    def __init__(self, *args):
        _SparkFHE.CiphertextVector_swiginit(self, _SparkFHE.new_CiphertextVector(*args))

    def push_back(self, x: "Ciphertext") -> "void":
        return _SparkFHE.CiphertextVector_push_back(self, x)

    def front(self) -> "std::vector< SparkFHE::Ciphertext >::value_type const &":
        return _SparkFHE.CiphertextVector_front(self)

    def back(self) -> "std::vector< SparkFHE::Ciphertext >::value_type const &":
        return _SparkFHE.CiphertextVector_back(self)

    def assign(self, n: "std::vector< SparkFHE::Ciphertext >::size_type", x: "Ciphertext") -> "void":
        return _SparkFHE.CiphertextVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _SparkFHE.CiphertextVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _SparkFHE.CiphertextVector_insert(self, *args)

    def reserve(self, n: "std::vector< SparkFHE::Ciphertext >::size_type") -> "void":
        return _SparkFHE.CiphertextVector_reserve(self, n)

    def capacity(self) -> "std::vector< SparkFHE::Ciphertext >::size_type":
        return _SparkFHE.CiphertextVector_capacity(self)
    __swig_destroy__ = _SparkFHE.delete_CiphertextVector

# Register CiphertextVector in _SparkFHE:
_SparkFHE.CiphertextVector_swigregister(CiphertextVector)

class PlaintextVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _SparkFHE.PlaintextVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _SparkFHE.PlaintextVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _SparkFHE.PlaintextVector___bool__(self)

    def __len__(self) -> "std::vector< SparkFHE::Plaintext >::size_type":
        return _SparkFHE.PlaintextVector___len__(self)

    def __getslice__(self, i: "std::vector< SparkFHE::Plaintext >::difference_type", j: "std::vector< SparkFHE::Plaintext >::difference_type") -> "std::vector< SparkFHE::Plaintext,std::allocator< SparkFHE::Plaintext > > *":
        return _SparkFHE.PlaintextVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _SparkFHE.PlaintextVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< SparkFHE::Plaintext >::difference_type", j: "std::vector< SparkFHE::Plaintext >::difference_type") -> "void":
        return _SparkFHE.PlaintextVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _SparkFHE.PlaintextVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< SparkFHE::Plaintext >::value_type const &":
        return _SparkFHE.PlaintextVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _SparkFHE.PlaintextVector___setitem__(self, *args)

    def pop(self) -> "std::vector< SparkFHE::Plaintext >::value_type":
        return _SparkFHE.PlaintextVector_pop(self)

    def append(self, x: "Plaintext") -> "void":
        return _SparkFHE.PlaintextVector_append(self, x)

    def empty(self) -> "bool":
        return _SparkFHE.PlaintextVector_empty(self)

    def size(self) -> "std::vector< SparkFHE::Plaintext >::size_type":
        return _SparkFHE.PlaintextVector_size(self)

    def swap(self, v: "PlaintextVector") -> "void":
        return _SparkFHE.PlaintextVector_swap(self, v)

    def begin(self) -> "std::vector< SparkFHE::Plaintext >::iterator":
        return _SparkFHE.PlaintextVector_begin(self)

    def end(self) -> "std::vector< SparkFHE::Plaintext >::iterator":
        return _SparkFHE.PlaintextVector_end(self)

    def rbegin(self) -> "std::vector< SparkFHE::Plaintext >::reverse_iterator":
        return _SparkFHE.PlaintextVector_rbegin(self)

    def rend(self) -> "std::vector< SparkFHE::Plaintext >::reverse_iterator":
        return _SparkFHE.PlaintextVector_rend(self)

    def clear(self) -> "void":
        return _SparkFHE.PlaintextVector_clear(self)

    def get_allocator(self) -> "std::vector< SparkFHE::Plaintext >::allocator_type":
        return _SparkFHE.PlaintextVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _SparkFHE.PlaintextVector_pop_back(self)

    def erase(self, *args) -> "std::vector< SparkFHE::Plaintext >::iterator":
        return _SparkFHE.PlaintextVector_erase(self, *args)

    def __init__(self, *args):
        _SparkFHE.PlaintextVector_swiginit(self, _SparkFHE.new_PlaintextVector(*args))

    def push_back(self, x: "Plaintext") -> "void":
        return _SparkFHE.PlaintextVector_push_back(self, x)

    def front(self) -> "std::vector< SparkFHE::Plaintext >::value_type const &":
        return _SparkFHE.PlaintextVector_front(self)

    def back(self) -> "std::vector< SparkFHE::Plaintext >::value_type const &":
        return _SparkFHE.PlaintextVector_back(self)

    def assign(self, n: "std::vector< SparkFHE::Plaintext >::size_type", x: "Plaintext") -> "void":
        return _SparkFHE.PlaintextVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _SparkFHE.PlaintextVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _SparkFHE.PlaintextVector_insert(self, *args)

    def reserve(self, n: "std::vector< SparkFHE::Plaintext >::size_type") -> "void":
        return _SparkFHE.PlaintextVector_reserve(self, n)

    def capacity(self) -> "std::vector< SparkFHE::Plaintext >::size_type":
        return _SparkFHE.PlaintextVector_capacity(self)
    __swig_destroy__ = _SparkFHE.delete_PlaintextVector

# Register PlaintextVector in _SparkFHE:
_SparkFHE.PlaintextVector_swigregister(PlaintextVector)



__FHE__ = None

def init(libName, schemeType, pubKey=None, secKey=None):
    global __FHE__
    if __FHE__ is None:
        if pubKey is not None and secKey is not None:
            __FHE__ = FHE(libName, schemeType, pubKey, secKey)
        elif pubKey is not None and secKey is None:
            __FHE__ = FHE(libName, schemeType, pubKey)
        else:
            __FHE__ = FHE(libName, schemeType)

def getInstance():
    if __FHE__ is not None:
        return __FHE__;
    else:
        raise RuntimeError("No SparkFHE object, call init() to initialize!")



def add(arg1: "int", arg2: "int") -> "int":
    return _SparkFHE.add(arg1, arg2)


